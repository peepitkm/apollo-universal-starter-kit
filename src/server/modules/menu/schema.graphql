# Menu
type Menu {
  id: Int!
  title: String!
  content: String!
  reviews: [Review]
}

# Review
type Review {
  id: Int!
  content: String!
}

# Edges for Menus
type MenuEdges {
  node: Menu
  cursor: Int
}

# PageInfo for Menus
type MenuPageInfo {
  endCursor: Int
  hasNextPage: Boolean
}

# Menus relay-style pagination query
type Menus {
  totalCount: Int
  edges: [MenuEdges]
  pageInfo: MenuPageInfo
}

extend type Query {
  # Menus pagination query
  menus(limit: Int, after: Int): Menus
  # Menu
  menu(id: Int!): Menu
}

extend type Mutation {
  # Create new menu
  addMenu(input: AddMenuInput!): Menu
  # Delete a menu
  deleteMenu(id: Int!): Menu
  # Edit a menu
  editMenu(input: EditMenuInput!): Menu
  # Add review to menu
  addReview(input: AddReviewInput!): Review
  # Delete a review
  deleteReview(input: DeleteReviewInput!): Review
  # Edit a review
  editReview(input: EditReviewInput!): Review
}

# Input for addMenu Mutation
input AddMenuInput {
  title: String!
  content: String!
}

# Input for editMenu Mutation
input EditMenuInput {
  id: Int!
  title: String!
  content: String!
}

# Input for addReview Mutation
input AddReviewInput {
  content: String!
  # Needed for reviewUpdated Subscription filter
  menuId: Int!
}

# Input for editReview Mutation
input DeleteReviewInput {
  id: Int!
  # Needed for reviewUpdated Subscription filter
  menuId: Int!
}

# Input for deleteReview Mutation
input EditReviewInput {
  id: Int!
  content: String!
  # Needed for reviewUpdated Subscription filter
  menuId: Int!
}

extend type Subscription {
  # Subscription for when editing a menu
  menuUpdated(id: Int!): Menu
  # Subscription for menu list
  menusUpdated(endCursor: Int!): UpdateMenuPayload
  # Subscription for reviews
  reviewUpdated(menuId: Int!): UpdateReviewPayload
}

# Payload for menusUpdated Subscription
type UpdateMenuPayload {
  mutation: String!
  id: Int!
  node: Menu
}

# Payload for reviewUpdated Subscription
type UpdateReviewPayload {
  mutation: String!
  id: Int
  menuId: Int!
  node: Review
}
